create database test;

use test;

create table customers
(
    id int,
    name varchar(50)
);

create table orders
(
    order_id int,
    amount int,
    cust_id int
);

insert into customers values(1,'John');
insert into customers values(2,'David');
insert into customers values(3,'Ronn');
insert into customers values(4,'Betty');
insert into orders values(1,100,10);
insert into orders values(2,500,3);
insert into orders values(3,300,6);
insert into orders values(4,800,2);
insert into orders values(5,350,1);

select * from orders ;
select * from customers ;

-- Get the orders information along with customer full details.if order amount were greater than 400.
select o.*,C.name from orders O 
inner join customers C on o.cust_id = c.id 
where o.amount > 400 ;

select o.*,C.name from orders O 
inner join customers C on o.cust_id = c.id and  o.amount > 400 ;

-- Window Functions
use test_db ;
create table shop_sales_data 
(
sales_date date,
shop_id varchar(5),
sales_amount int
);	

insert into  shop_sales_data values('2022-02-14', 's1',200) ,('2022-02-15', 's1',300) ,
					('2022-02-14', 's2',600) ,('2022-02-15', 's3',500) ,('2022-02-18', 's1',400) ,
					('2022-02-17','s2',250) ,('2022-02-20', 's3',300) ;

select * from shop_sales_data ;

-- total count of sales for each shop using window function 
-- working function -sum(),Min(),Max(),Count(),AVG()
select *, count(*) 
over(partition by  shop_id ) as total_sales_count_by_shops
from  shop_sales_data ;

-- Using Group By
select shop_id, count(*)   as total_sales_count_by_shops
from  shop_sales_data 
group by shop_id;

-- Window Function with order by clause
select *, count(*) 
over(partition by  shop_id order by sales_amount desc) as total_sales_count_by_shops
from  shop_sales_data ;

-- if we use only order by in over clause
select *, sum(sales_amount) 
over(order by sales_amount desc) as total_sales_amount_by_shops
from  shop_sales_data ;

-- if we use both partition by & Order  by with sum function
select *, sum(sales_amount) 
over(partition by shop_id order by sales_amount desc) as total_sales_amount_by_shops
from  shop_sales_data ;

create table amazon_sales_data 	
(
 saales_date date,
sales_amount int
);

insert into amazon_sales_data values ('2022-08-21',500),('2022-08-22',600),('2022-08-19',300),
									('2022-08-18',200),('2022-08-18',800) ;
                                    
# Query ---> to calculate  the date wise rolling average of amazon sales
select * from amazon_sales_data ;


select * , avg(sales_amount) 
over(order by saales_date asc) as Avg_sales 
from amazon_sales_data ;

# Query ---> to calculate  the date wise rolling average of amazon sales &  roling sum values
select * , 
avg(sales_amount) over(order by saales_date asc) as Avg_sales ,
sum(sales_amount) over(order by saales_date asc) as sum_sales 
from amazon_sales_data ;

-- Rank(),Dese Rank(),Row_number()
insert into  shop_sales_data values('2022-02-19', 's1',400) ,('2022-02-20', 's1',400) ,
					('2022-02-22', 's1',300) ,('2022-02-25', 's1',200) ,('2022-02-15', 's2',600) ,
					('2022-02-16','s2',600) ,('2022-02-16', 's3',500),('2022-02-18', 's3',500) ,
                    ('2022-02-18', 's3',500);
                    
 select * from shop_sales_data ;   
 select *,
 row_number() over(partition by shop_id order by sales_amount desc) as Row_num ,
 rank() over(partition by shop_id order by sales_amount desc) as Rank_num ,
 dense_rank() over(partition by shop_id order by sales_amount desc) as Row_num 
from shop_sales_data ;

select * from employee ;
create table employee_Sal_Dep 
(
 emp_id int,
 salary int,
 dept_name varchar(20)
 );
 
 insert into employee_Sal_Dep values(1,10000,'Software');
insert into employee_Sal_Dep values(2,11000,'Software');
insert into employee_Sal_Dep values(3,11000,'Software');
insert into employee_Sal_Dep values(4,11000,'Software');
insert into employee_Sal_Dep values(5,15000,'Finance');
insert into employee_Sal_Dep values(6,15000,'Finance');
insert into employee_Sal_Dep values(7,15000,'IT');
insert into employee_Sal_Dep values(8,12000,'HR');
insert into employee_Sal_Dep values(9,12000,'HR');
insert into employee_Sal_Dep values(10,11000,'HR');

select * from employee_Sal_Dep ;

#Query ---> get one employee from each department who is getting maximum salary (employee can be random if salary is same
select * ,
max(salary) over(partition by dept_name) as max_salary from employee_Sal_Dep ;

select tem.* from (
select * ,
row_number() over(partition by dept_name order by salary desc ) as row_num
 from employee_Sal_Dep )tem
 where row_num = 1;
 
 #Query ---> get all the  employee from each department who is getting maximum salary (employee can be random if salary is same
select tem.* from (
select * ,
rank() over(partition by dept_name order by salary desc ) as rank_num
 from employee_Sal_Dep )tem
 where rank_num = 1; 
 
 #Quwery ---> get all top 2 ranked employees from each department who are getting maximum salary.
 select tem.* from (
select * ,
dense_rank() over(partition by dept_name order by salary desc ) as dens_rank_num
 from employee_Sal_Dep )tem
 where dens_rank_num <= 2;  
 
 -- Lead & Lag Functions 
create table daily_sales
(
sales_date date,
sales_amount int
);


insert into daily_sales values('2022-03-11',400);
insert into daily_sales values('2022-03-12',500);
insert into daily_sales values('2022-03-13',300);
insert into daily_sales values('2022-03-14',600);
insert into daily_sales values('2022-03-15',500);
insert into daily_sales values('2022-03-16',200);

select * from daily_sales;
-- Lag Function.
select *,
      lag(sales_amount, 1) over(order by sales_date) as pre_day_sales
from daily_sales;

# Query --> Calculte the difference of sales with previous day sales
select sales_date,
       sales_amount as curr_day_sales,
       lag(sales_amount, 1) over(order by sales_date) as prev_day_sales,
       sales_amount - lag(sales_amount, 1) over(order by sales_date) as sales_diff
from daily_sales;
-- To Overcome Null
select sales_date,
       sales_amount as curr_day_sales,
       lag(sales_amount, 1,0) over(order by sales_date) as prev_day_sales,
       sales_amount - lag(sales_amount, 1,0) over(order by sales_date) as sales_diff
from daily_sales;

-- LAg Function.
select *,
      lead(sales_amount, 1,0) over(order by sales_date) as Next_day_sales
from daily_sales;

-- Lead will give previuos_days info and lag will give next day info in table.
# Diff between lead and lag
select *,
      lag(sales_amount, 1) over(order by sales_date) as pre_day_sales
from daily_sales;

select *,
      lead(sales_amount, 1) over(order by sales_date) as next_day_sales
from daily_sales;


# How to use Frame Clause - Rows BETWEEN
select * from daily_sales;

select *,
      sum(sales_amount) over(order by sales_date rows between 1 preceding and 1 following) as prev_plus_next_sales_sum
from daily_sales;

select *,
      sum(sales_amount) over(order by sales_date rows between 1 preceding and current row) as prev_plus_next_sales_sum
from daily_sales;

select *,
      sum(sales_amount) over(order by sales_date rows between current row and 1 following) as prev_plus_next_sales_sum
from daily_sales;

select *,
      sum(sales_amount) over(order by sales_date rows between 2 preceding and 1 following) as prev_plus_next_sales_sum
from daily_sales;

select *,
      sum(sales_amount) over(order by sales_date rows between unbounded preceding and current row) as prev_plus_next_sales_sum
from daily_sales;

select *,
      sum(sales_amount) over(order by sales_date rows between current row and unbounded following) as prev_plus_next_sales_sum
from daily_sales;

select *,
      sum(sales_amount) over(order by sales_date rows between unbounded preceding and unbounded following) as prev_plus_next_sales_sum
from daily_sales;

# Alternate way to esclude computation of current row
select *,
      sum(sales_amount) over(order by sales_date rows between unbounded preceding and unbounded following) - sales_amount as prev_plus_next_sales_sum
from daily_sales;

# How to work with Range Between

select *,
      sum(sales_amount) over(order by sales_amount range between 100 preceding and 200 following) as prev_plus_next_sales_sum
from daily_sales;

# Calculate the running sum for a week
# Calculate the running sum for a month
insert into daily_sales values('2022-03-20',900);
insert into daily_sales values('2022-03-23',200);
insert into daily_sales values('2022-03-25',300);
insert into daily_sales values('2022-03-29',250);


select * from daily_sales;

select *,
       sum(sales_amount) over(order by sales_date range between interval '6' day preceding and current row) as running_weekly_sum
from daily_sales;
